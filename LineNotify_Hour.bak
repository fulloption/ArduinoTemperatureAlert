void Line_Notify(String message);
#include <SPI.h>
#include <ESP8266WiFi.h>
#include <WiFiClientSecureAxTLS.h>
//#include <WiFiClientSecure.h>
#include "max6675.h"
#include <time.h>
// Config connect WiFi
#define WIFI_SSID "DNTH_HQ_WLAN" // แก้ชื่อ ssid
#define WIFI_PASSWORD "dnth123452557" // แก้รหัสผ่าน
// Line config
//#keng-CV09UuQdd64Blcd8XJZfKrRudjArV4s6dvYeBx5zii6
//#it-RAp56Zo7DZGsAxZiiYHBLFVVYDr7rQyUvnhk8kARzDs
#define LINE_TOKEN "RAp56Zo7DZGsAxZiiYHBLFVVYDr7rQyUvnhk8kARzDs" // แก้ LINE TOKEN
String message = "Hello NodeMCU and Line";
//String message2 = "%E0%B8%AA%E0%B8%A7%E0%B8%B1%E0%B8%AA%E0%B8%94%E0%B8%B5%20Line%20and%20NodeMCU%20%E0%B8%A2%E0%B8%B4%E0%B8%99%E0%B8%94%E0%B8%B5%E0%B8%97%E0%B8%B5%E0%B9%88%E0%B9%84%E0%B8%94%E0%B9%89%E0%B8%A3%E0%B8%B9%E0%B9%89%E0%B8%88%E0%B8%B1%E0%B8%81";
String message2 = "ลองภาษาไทยไปด้วยเลยแล้วกัน";
//Line Notify ยังไม่รองรับภาษาไทย ดังนั้นเราสามารถแปลงข้อความเป็น utf-8 เพื่อส่งเป็นภาษาไทยได้ จาก http://meyerweb.com/eric/tools/dencoder/
//-----------------------------------------------------------
char ntp_server1[20] = "pool.ntp.org";
char ntp_server2[20] = "time.nist.gov";
char ntp_server3[20] = "time.uni.net.th";
int timezone = 7 * 3600;
int dst = 0;
//-----------------------------------------------------------
int ktcSO = 12;
int ktcCS = 13;
int ktcCLK = 14;
float temp_chk = 0.0;
float temp_val = 0.0;
int min_max = 2;
int loop1;     
int loop_time;    
int warning_flg; 
int current_hour = 0;
String celsius = "";
String alert = "";
String check_date = "";
String cur_date = "";
MAX6675 thermocouple(ktcCLK, ktcCS, ktcSO);
//------------------------------------------------------------------------
void setup() {
      //--
      loop1 = 0;
      Serial.begin(115200);      
      Serial.println("Config start");
      WiFi.mode(WIFI_STA);
      // connect to wifi.
      WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
      Serial.print("connecting");
      
      while (WiFi.status() != WL_CONNECTED) {
        if(loop1 == 20){
          loop1 = 0 ;
          Serial.println("Wait Wifi Connect!");
        }
        Serial.print(".");
        delay(500);
        loop1++;
      }
      //CC:50:E3:C6:DE:EC
      /*Serial.println(WiFi.macAddress());
      IPAddress local_ip = {192,168,253,209};   //ตั้งค่า IP
      IPAddress gateway={192,168,253,1};    //ตั้งค่า IP Gateway
      IPAddress subnet={255,255,255,0};   //ตั้งค่า Subnet
      IPAddress dns={192,168,248,2};  //ตั้งค่า DNS
      WiFi.config(local_ip,dns,gateway,subnet);   //setค่าไปยังโมดูล*/
   
      Serial.println(""); 
      Serial.println("WiFi connected");   //แสดงข้อความเชื่อมต่อสำเร็จ  
      Serial.println("IP address: "); 
      Serial.println(WiFi.localIP()); //แสดงหมายเลข IP ของ ESP8266
      //-------------------------------------------------------------------
      configTime(timezone, dst, ntp_server1, ntp_server2, ntp_server3);
      Serial.println("\nWaiting for time");
      while (!time(nullptr)) {
        Serial.print(".");
        delay(1000);
      }
      
      //check_date = p_tm->tm_year  +  std::string(2 - p_tm->tm_mon.length(), '0') + p_tm->tm_mon  +   std::string(2 - p_tm->tm_mday.length(), '0') + p_tm->tm_mday ;
      temp_chk = 0;
      /*celsius = String(thermocouple.readCelsius());
      alert = "อุณหภูมิห้อง = "+celsius+" C"; 
      Line_Notify(alert);*/
      warning_flg = 1;

      time_t now = time(nullptr);      
      struct tm* p_tm = localtime(&now);        
      String y = String(p_tm->tm_year+1900)+"";
      String m = String(p_tm->tm_mon+1)+"";
      String d = String(p_tm->tm_mday)+"";
      String zero = "00";
      check_date = y+zero.substring(0,m.length())+m+zero.substring(0,d.length())+d;
      //Serial.println("--->"+check_date);
      //check_date = "20190902";
}

void loop(){      
      temp_val = thermocouple.readCelsius() - 1 ;//calibate on current temperature
      celsius = String(temp_val);
      alert = "!!** อุณหภูมิห้อง Server = "+celsius+" C"; 
      if(temp_val > 28.00){//เช็คถ้าอุณหภูมิ เกินให้ส่ง Line
          if((temp_chk-min_max) > temp_val || (temp_chk+min_max) < temp_val){
              Line_Notify(alert);
              loop_time = 0;
              temp_chk = temp_val;   
              warning_flg = 1;           
          }
          int time_limit  = 6 * 15; // = 1 *15 min
          if(loop_time > time_limit){
              Line_Notify(alert);
              loop_time = 0;
              temp_chk = temp_val;
              warning_flg = 1;
          }        
          loop_time++;
      }else if(warning_flg == 1){
          //temp_chk = temp_val;   
          Line_Notify(alert);
          warning_flg = 0;
          temp_chk = 0;
      }
      //----
      time_t now = time(nullptr);      
      struct tm * p_tm = localtime(&now);        
      String y = String(p_tm->tm_year+1900)+"";
      String m = String(p_tm->tm_mon+1)+"";
      String d = String(p_tm->tm_mday)+"";
      String zero = "00";
      cur_date = y+zero.substring(0,m.length())+m+zero.substring(0,d.length())+d;
      //if(check_date != cur_date && (p_tm->tm_hour) > 7 ){
      if( (p_tm->tm_hour)+1 > current_hour ){
          current_hour = (p_tm->tm_hour) + 1;// for +1 hour to next time          
          check_date = cur_date;
          Line_Notify("อุณหภูมิห้อง Server เช้านี้ = "+celsius+ " C ระบบจะแจ้งเตือนเมื่ออุณหภฺมิมากกว่า 28.00 C");
      }
      //----      
      Serial.println(alert);
      Serial.println("CHECK DATE:"+check_date+"<---> CURRENT DATE : "+cur_date+" HOUR : "+p_tm->tm_hour);
      delay(1000*10);//delay * 10 sec
}
void Line_Notify(String message) {
      axTLS::WiFiClientSecure client; // กรณีขึ้น Error ให้ลบ axTLS:: ข้างหน้าทิ้ง     
      if (!client.connect("notify-api.line.me", 443)) {
          Serial.println("connection failed");
          return;
      }  
      String req = "";
      req += "POST /api/notify HTTP/1.1\r\n";
      req += "Host: notify-api.line.me\r\n";
      req += "Authorization: Bearer " + String(LINE_TOKEN) + "\r\n";
      req += "Cache-Control: no-cache\r\n";
      req += "User-Agent: ESP8266\r\n";
      req += "Content-Type: application/x-www-form-urlencoded\r\n";
      req += "Content-Length: " + String(String("message=" + message).length()) + "\r\n";
      req += "\r\n";
      req += "message=" + message;
      Serial.println(req);
      client.print(req);
      delay(100);
      
      Serial.println("-------------");
      while (client.connected()) {
        String line = client.readStringUntil('\n');
        if (line == "\r") {
          break;
        }
        Serial.println(line);
      }
      Serial.println("-------------");
}
